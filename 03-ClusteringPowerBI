#Cargar librerias
import pyodbc
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.spatial import distance as sci_distante
from sklearn import cluster as sk_cluster


#Conexi贸n base de datos 
import pyodbc

try:
    connection = pyodbc.connect('DRIVER={SQL Server};SERVER=YERAI_CM\SQLEXPRESS;DATABASE=tpcxbb_1gb;UID=sa;PWD=Yerato94')
    # connection = pyodbc.connect('DRIVER={SQL Server};SERVER=USKOKRUM2010;DATABASE=django_api;Trusted_Connection=yes;')
    print("Conexi贸n exitosa.")
    cursor = connection.cursor()
    cursor.execute("SELECT @@version;")
    row = cursor.fetchone()
    print("Versi贸n del servidor de SQL Server: {}".format(row))
    cursor.execute("SELECT * FROM tarea")
    rows = cursor.fetchall()
    for row in rows:
        print(row)
except Exception as ex:
    print("Error durante la conexi贸n: {}".format(ex))
    
    
input_query = '''SELECT
ss_customer_sk AS customer,
ROUND(COALESCE(returns_count / NULLIF(1.0*orders_count, 0), 0), 7) AS orderRatio,
ROUND(COALESCE(returns_items / NULLIF(1.0*orders_items, 0), 0), 7) AS itemsRatio,
ROUND(COALESCE(returns_money / NULLIF(1.0*orders_money, 0), 0), 7) AS monetaryRatio,
COALESCE(returns_count, 0) AS frequency
FROM
(
  SELECT
    ss_customer_sk,
    -- return order ratio
    COUNT(distinct(ss_ticket_number)) AS orders_count,
    -- return ss_item_sk ratio
    COUNT(ss_item_sk) AS orders_items,
    -- return monetary amount ratio
    SUM( ss_net_paid ) AS orders_money
  FROM store_sales s
  GROUP BY ss_customer_sk
) orders
LEFT OUTER JOIN
(
  SELECT
    sr_customer_sk,
    -- return order ratio
    count(distinct(sr_ticket_number)) as returns_count,
    -- return ss_item_sk ratio
    COUNT(sr_item_sk) as returns_items,
    -- return monetary amount ratio
    SUM( sr_return_amt ) AS returns_money
FROM store_returns
GROUP BY sr_customer_sk ) returned ON ss_customer_sk=sr_customer_sk '''

#######################################

customer_data = pd.read_sql(input_query, connection)

########################################

print("Data Frame:", customer_data.head(n=5))

# numero de clusters usando el Elbow method

cdata = customer_data
k = range(1, 20)
KM = (sk_cluster.KMeans(n_clusters=k).fit(cdata) for k in k)
centroids = (k.cluster_centers_ for k in KM)

D_k = (sci_distante.cdist(cdata, cent, 'euclidean') for cent in centroids)
dist = (np.min(D, axis=1 ) for D in D_k)
avgWithinSS = [sum (d)/ cdata.shape[0] for d in dist]
plt.plot(k, avgWithinSS, 'b*-' )
plt.grid(True)
plt.xlabel('Number of clusters')
plt.ylabel('Average within cluster sum of squares')
plt.title('Elbow for KMeans Clustering')
#plt.show()

#Cluster usando Kmeans

n_clusters = 4

means_cluster = sk_cluster.KMeans(n_clusters=n_clusters, random_state=1111)
columns = ["orderRatio", "itemsRatio", "monetaryRatio", "frequency"]
estructura = means_cluster.fit(customer_data[columns])
clusters = estructura.labels_
customer_data['cluster'] = clusters

# For each cluster count the members.
for c in range (n_clusters):
    cluster_members = [customer_data['cluster'] == c][:]
    print('Cluster{}(n=({}):' .format(c, len(cluster_members)))
    print('-'* 17)
    print(customer_data.groupby([clusters]).mean())
    
centroides = means_cluster.cluster_centers_
print(centroides)
#Conocer el nombre de las columnas
customer_data.columns
print(customer_data)


    
